# Aktualizace časového rozsahu podle zvoleného povodí
observeEvent(input$povodi, {
req(input$povodi)  # Požadovat, aby bylo vybráno povodí
data <- povodi_list[[input$povodi]]
min_date <- min(data$Date, na.rm = TRUE)
max_date <- max(data$Date, na.rm = TRUE)
updateSliderInput(session, "daterange",
min = min_date, max = max_date,
value = c(min_date, max_date))
})
# Reaktivní data na základě výběru povodí a časového rozsahu
selected_data <- reactive({
req(input$povodi, input$daterange)  # Požadovat vstupy
data <- povodi_list[[input$povodi]]
data <- data[data$Date >= input$daterange[1] & data$Date <= input$daterange[2], ]
return(data)
})
# Generování grafu
output$plot <- renderPlot({
req(selected_data())  # Požadovat data
ggplot(selected_data(), aes(x = Date, y = .data[[input$variable]])) +
geom_line(color = "blue") +
labs(title = paste("Graf proměnné", input$variable, "pro", input$povodi),
x = "Date", y = input$variable) +
theme_minimal()
})
}
# Ukázková data
povodi_list <- list(
Povodi_A = data.frame(
Date = seq.Date(from = as.Date("2024-01-01"), by = "day", length.out = 10),
Srazky = runif(10, 0, 20),
Tmax = runif(10, -5, 35),
Tmin = runif(10, -10, 30),
Q = runif(10, 5, 100)
),
Povodi_B = data.frame(
Date = seq.Date(from = as.Date("2024-01-05"), by = "day", length.out = 15),
Srazky = runif(15, 0, 15),
Tmax = runif(15, -2, 30),
Tmin = runif(15, -8, 25),
Q = runif(15, 10, 90)
)
)
# Spuštění aplikace
shinyApp(ui = ui, server = server)
}
{
# UI
ui <- fluidPage(
titlePanel("Přepínání mezi povodími"),
sidebarLayout(
sidebarPanel(
selectInput("povodi", "Vyberte povodí:", choices = NULL),
sliderInput("daterange", "Vyberte časový rozsah:",
min = as.Date("2000-01-01"), max = as.Date("2000-12-31"),
value = c(as.Date("2000-01-01"), as.Date("2000-12-31")),
timeFormat = "%Y-%m-%d"),
selectInput("variable", "Vyberte proměnnou k zobrazení:",
choices = c("Srážky" = "Srazky", "Tmax" = "Tmax",
"Tmin" = "Tmin", "Q" = "Q"))
),
mainPanel(
plotOutput("plot")
)
)
)
# Server
server <- function(input, output, session) {
# Načtení povodí do výběru
observe({
updateSelectInput(session, "povodi", choices = names(povodi_list))
})
# Aktualizace časového rozsahu podle zvoleného povodí
observeEvent(input$povodi, {
req(input$povodi)  # Požadovat, aby bylo vybráno povodí
data <- povodi_list[[input$povodi]]
min_date <- min(data$Date, na.rm = TRUE)
max_date <- max(data$Date, na.rm = TRUE)
updateSliderInput(session, "daterange",
min = min_date, max = max_date,
value = c(min_date, max_date))
})
# Reaktivní data na základě výběru povodí a časového rozsahu
selected_data <- reactive({
req(input$povodi, input$daterange)  # Požadovat vstupy
data <- povodi_list[[input$povodi]]
data <- data[data$Date >= input$daterange[1] & data$Date <= input$daterange[2], ]
return(data)
})
# Generování grafu
output$plot <- renderPlot({
req(selected_data())  # Požadovat data
ggplot(selected_data(), aes(x = Date, y = .data[[input$variable]])) +
geom_line(color = "blue") +
labs(title = paste("Graf proměnné", input$variable, "pro", input$povodi),
x = "Date", y = input$variable) +
theme_minimal()
})
}
# Spuštění aplikace
shinyApp(ui = ui, server = server)
}
{
library(shiny)
library(ggplot2)
cisloslozka <- "18"   ## číslo složky 01 až 18
umisteni <- paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/", cisloslozka)
soubory <- list.files(umisteni, pattern = "_streamflow_qc.txt$", full.names = FALSE)
cislasoubory <- data.frame(id = sub("_.*", "", soubory))
cislasoubory
poradisouboru <- 31
Qcamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_streamflow_qc.txt"), header=FALSE)
VALScamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/basin_mean_forcing/nldas/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_lump_nldas_forcing_leap.txt"), header=FALSE, skip = 4)
povodi_list <- list()
for(i in 1:40){
povodi_list[[i]] <- data.frame(VALScamel$V1,VALScamel$V2,VALScamel$V3,VALScamel$V6,VALScamel$V9,VALScamel$V10,Qcamel$V5)
names(povodi_list[[i]]) <- c("Rok","Mesic","Den","Srazky","Tmax","Tmin","Q")
povodi_list[[i]]$Date <- as.Date(paste(povodi_list[[i]]$Rok, povodi_list[[i]]$Mesic, povodi_list[[i]]$Den, sep = "-"))
povodi_list[[i]] <- povodi_list[[i]][,4:8]
}
names(povodi_list) = 1:40
}
{
# UI
ui <- fluidPage(
titlePanel("Přepínání mezi povodími"),
sidebarLayout(
sidebarPanel(
selectInput("povodi", "Vyberte povodí:", choices = NULL),
sliderInput("daterange", "Vyberte časový rozsah:",
min = as.Date("2000-01-01"), max = as.Date("2000-12-31"),
value = c(as.Date("2000-01-01"), as.Date("2000-12-31")),
timeFormat = "%Y-%m-%d"),
selectInput("variable", "Vyberte proměnnou k zobrazení:",
choices = c("Srážky" = "Srazky", "Tmax" = "Tmax",
"Tmin" = "Tmin", "Q" = "Q"))
),
mainPanel(
plotOutput("plot")
)
)
)
# Server
server <- function(input, output, session) {
# Načtení povodí do výběru
observe({
updateSelectInput(session, "povodi", choices = names(povodi_list))
})
# Aktualizace časového rozsahu podle zvoleného povodí
observeEvent(input$povodi, {
req(input$povodi)  # Požadovat, aby bylo vybráno povodí
data <- povodi_list[[input$povodi]]
min_date <- min(data$Date, na.rm = TRUE)
max_date <- max(data$Date, na.rm = TRUE)
updateSliderInput(session, "daterange",
min = min_date, max = max_date,
value = c(min_date, max_date))
})
# Reaktivní data na základě výběru povodí a časového rozsahu
selected_data <- reactive({
req(input$povodi, input$daterange)  # Požadovat vstupy
data <- povodi_list[[input$povodi]]
data <- data[data$Date >= input$daterange[1] & data$Date <= input$daterange[2], ]
return(data)
})
# Generování grafu
output$plot <- renderPlot({
req(selected_data())  # Požadovat data
ggplot(selected_data(), aes(x = Date, y = .data[[input$variable]])) +
geom_line(color = "blue") +
labs(title = paste("Graf proměnné", input$variable, "pro", input$povodi),
x = "Date", y = input$variable) +
theme_minimal()
})
}
# Spuštění aplikace
shinyApp(ui = ui, server = server)
}
{
# UI
ui <- fluidPage(
titlePanel("Přepínání mezi povodími"),
sidebarLayout(
sidebarPanel(
width = 3,  # Nastaví šířku sidebaru
selectInput("povodi", "Vyberte povodí:", choices = NULL),
sliderInput("daterange", "Vyberte časový rozsah:",
min = as.Date("2000-01-01"), max = as.Date("2000-12-31"),
value = c(as.Date("2000-01-01"), as.Date("2000-12-31")),
timeFormat = "%Y-%m-%d",
width = "100%"),  # Slider zabere celou šířku kontejneru
selectInput("variable", "Vyberte proměnnou k zobrazení:",
choices = c("Srážky" = "Srazky", "Tmax" = "Tmax",
"Tmin" = "Tmin", "Q" = "Q"))
),
mainPanel(
width = 9,  # Nastaví šířku hlavního panelu
plotOutput("plot")
)
)
)
# Server
server <- function(input, output, session) {
# Načtení povodí do výběru
observe({
updateSelectInput(session, "povodi", choices = names(povodi_list))
})
# Aktualizace časového rozsahu podle zvoleného povodí
observeEvent(input$povodi, {
req(input$povodi)  # Požadovat, aby bylo vybráno povodí
data <- povodi_list[[input$povodi]]
min_date <- min(data$Date, na.rm = TRUE)
max_date <- max(data$Date, na.rm = TRUE)
updateSliderInput(session, "daterange",
min = min_date, max = max_date,
value = c(min_date, max_date))
})
# Reaktivní data na základě výběru povodí a časového rozsahu
selected_data <- reactive({
req(input$povodi, input$daterange)  # Požadovat vstupy
data <- povodi_list[[input$povodi]]
data <- data[data$Date >= input$daterange[1] & data$Date <= input$daterange[2], ]
return(data)
})
# Generování grafu
output$plot <- renderPlot({
req(selected_data())  # Požadovat data
ggplot(selected_data(), aes(x = Date, y = .data[[input$variable]])) +
geom_line(color = "blue") +
labs(title = paste("Graf proměnné", input$variable, "pro", input$povodi),
x = "Date", y = input$variable) +
theme_minimal()
})
}
# Spuštění aplikace
shinyApp(ui = ui, server = server)
}
{
# UI
ui <- fluidPage(
titlePanel("Přepínání mezi povodími"),
# Layout
fluidRow(
column(
width = 3,  # Levý sloupec s výběry
selectInput("povodi", "Vyberte povodí:", choices = NULL),
selectInput("variable", "Vyberte proměnnou k zobrazení:",
choices = c("Srážky" = "Srazky", "Tmax" = "Tmax",
"Tmin" = "Tmin", "Q" = "Q"))
),
column(
width = 9,  # Pravý sloupec se širokým sliderem
sliderInput("daterange", "Vyberte časový rozsah:",
min = as.Date("2000-01-01"), max = as.Date("2000-12-31"),
value = c(as.Date("2000-01-01"), as.Date("2000-12-31")),
timeFormat = "%Y-%m-%d",
width = "100%")
)
),
# Graf pod výběry
fluidRow(
column(
width = 12,
plotOutput("plot")
)
)
)
# Server
server <- function(input, output, session) {
# Načtení povodí do výběru
observe({
updateSelectInput(session, "povodi", choices = names(povodi_list))
})
# Aktualizace časového rozsahu podle zvoleného povodí
observeEvent(input$povodi, {
req(input$povodi)  # Požadovat, aby bylo vybráno povodí
data <- povodi_list[[input$povodi]]
min_date <- min(data$Date, na.rm = TRUE)
max_date <- max(data$Date, na.rm = TRUE)
updateSliderInput(session, "daterange",
min = min_date, max = max_date,
value = c(min_date, max_date))
})
# Reaktivní data na základě výběru povodí a časového rozsahu
selected_data <- reactive({
req(input$povodi, input$daterange)  # Požadovat vstupy
data <- povodi_list[[input$povodi]]
data <- data[data$Date >= input$daterange[1] & data$Date <= input$daterange[2], ]
return(data)
})
# Generování grafu
output$plot <- renderPlot({
req(selected_data())  # Požadovat data
ggplot(selected_data(), aes(x = Date, y = .data[[input$variable]])) +
geom_line(color = "blue") +
labs(title = paste("Graf proměnné", input$variable, "pro", input$povodi),
x = "Date", y = input$variable) +
theme_minimal()
})
}
# Spuštění aplikace
shinyApp(ui = ui, server = server)
}
{
# UI
ui <- fluidPage(
titlePanel("Přepínání mezi povodími"),
# Layout
fluidRow(
column(
width = 3,  # Levý sloupec s výběry
selectInput("povodi", "Vyberte povodí:", choices = NULL),
selectInput("variable", "Vyberte proměnnou k zobrazení:",
choices = c("Srážky" = "Srazky", "Tmax" = "Tmax",
"Tmin" = "Tmin", "Q" = "Q"))
),
column(
width = 9,  # Pravý sloupec se širokým sliderem
sliderInput("daterange", "Vyberte časový rozsah:",
min = as.Date("2000-01-01"), max = as.Date("2000-12-31"),
value = c(as.Date("2000-01-01"), as.Date("2000-12-31")),
timeFormat = "%Y-%m-%d",
width = "100%")
)
),
# Graf pod výběry
fluidRow(
column(
width = 12,
plotOutput("plot")
)
)
)
# Server
server <- function(input, output, session) {
# Načtení povodí do výběru
observe({
updateSelectInput(session, "povodi", choices = names(povodi_list))
})
# Aktualizace časového rozsahu podle zvoleného povodí
observeEvent(input$povodi, {
req(input$povodi)  # Požadovat, aby bylo vybráno povodí
data <- povodi_list[[input$povodi]]
min_date <- min(data$Date, na.rm = TRUE)
max_date <- max(data$Date, na.rm = TRUE)
updateSliderInput(session, "daterange",
min = min_date, max = max_date,
value = c(min_date, max_date))
})
# Reaktivní data na základě výběru povodí a časového rozsahu
selected_data <- reactive({
req(input$povodi, input$daterange)  # Požadovat vstupy
data <- povodi_list[[input$povodi]]
data <- data[data$Date >= input$daterange[1] & data$Date <= input$daterange[2], ]
return(data)
})
# Generování grafu
output$plot <- renderPlot({
req(selected_data())  # Požadovat data
ggplot(selected_data(), aes(x = Date, y = .data[[input$variable]])) +
geom_line(color = "blue") +
labs(title = paste("Graf proměnné", input$variable, "pro", input$povodi),
x = "Date", y = input$variable) +
theme_minimal()
})
}
# Spuštění aplikace
shinyApp(ui = ui, server = server)
}
library(Rcpp)
setwd("C:/Users/danek/Desktop/mlpR/vsnn")
Rcpp::sourceCpp("rcppstuff.cpp")
{
cisloslozka <- "03"   ## číslo složky 01 až 18
umisteni <- paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/", cisloslozka)
soubory <- list.files(umisteni, pattern = "_streamflow_qc.txt$", full.names = FALSE)
cislasoubory <- data.frame(id = sub("_.*", "", soubory))
cislasoubory
poradisouboru <- 11
Qcamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_streamflow_qc.txt"), header=FALSE)
VALScamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/basin_mean_forcing/nldas/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_lump_nldas_forcing_leap.txt"), header=FALSE, skip = 4)
names(Qcamel) = c("ID","rok","mesic","den","Q","podm")
##names(VALScamel) = c("rok", "mesic", "den", "delka dne asi[s]", "srazky [mm/den]", "")
Qcamel <- Qcamel[,1:5]
VALScamel <- VALScamel[1:length(Qcamel$Q),]
Qcamel <- Qcamel[1:length(VALScamel$V1),]
Qcamel$Q <- Qcamel$Q * 0.0283168466
Rcamel <- VALScamel$V6
Qcamel <- Qcamel[!(Qcamel$mesic == 2 & Qcamel$den == 29), ]
Q <- (Qcamel$Q - min(Qcamel$Q))/(max(Qcamel$Q)-min(Qcamel$Q))
}
{
cisloslozka <- "03"   ## číslo složky 01 až 18
umisteni <- paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/", cisloslozka)
soubory <- list.files(umisteni, pattern = "_streamflow_qc.txt$", full.names = FALSE)
cislasoubory <- data.frame(id = sub("_.*", "", soubory))
cislasoubory
poradisouboru <- 11
Qcamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_streamflow_qc.txt"), header=FALSE)
VALScamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/basin_mean_forcing/nldas/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_lump_nldas_forcing_leap.txt"), header=FALSE, skip = 4)
names(Qcamel) = c("ID","rok","mesic","den","Q","podm")
##names(VALScamel) = c("rok", "mesic", "den", "delka dne asi[s]", "srazky [mm/den]", "")
Qcamel <- Qcamel[,1:5]
VALScamel <- VALScamel[1:length(Qcamel$Q),]
Qcamel <- Qcamel[1:length(VALScamel$V1),]
Qcamel$Q <- Qcamel$Q * 0.0283168466
Rcamel <- VALScamel$V6
Qcamel <- Qcamel[!(Qcamel$mesic == 2 & Qcamel$den == 29), ]
Q <- (Qcamel$Q - min(Qcamel$Q))/(max(Qcamel$Q)-min(Qcamel$Q))
}
ker = 7
poc_ker = 20
roky_cal = 15
roky_val = 20
vstup_cal <- Q[1:(roky_cal*365)]
chtenejout_cal <- Q[((ker-1)*365+ker+1):(365*roky_cal+ker)]
mlp <- udelej_nn()
nn_init_nn(mlp,poc_ker,c(poc_ker,poc_ker,1))
nn_set_vstup_rada(mlp,vstup_cal)
nn_set_chtenejout(mlp,chtenejout_cal)
nn_cnn_pokus_cal(mlp,ker,poc_ker,50)
simulout_cal <- nn_get_vystupy(mlp)
plot(chtenejout_cal,type = "l")
lines(simulout_cal,col = "red")
mlp <- udelej_nn()
nn_init_nn(mlp,poc_ker,c(poc_ker,poc_ker,1))
nn_set_vstup_rada(mlp,vstup_cal)
nn_set_chtenejout(mlp,chtenejout_cal)
nn_cnn_pokus_cal(mlp,ker,poc_ker,200)
simulout_cal <- nn_get_vystupy(mlp)
plot(chtenejout_cal,type = "l")
lines(simulout_cal,col = "red")
ker = 7
poc_ker = 40
roky_cal = 15
roky_val = 20
vstup_cal <- Q[1:(roky_cal*365)]
chtenejout_cal <- Q[((ker-1)*365+ker+1):(365*roky_cal+ker)]
mlp <- udelej_nn()
nn_init_nn(mlp,poc_ker,c(poc_ker,poc_ker,1))
nn_set_vstup_rada(mlp,vstup_cal)
nn_set_chtenejout(mlp,chtenejout_cal)
nn_cnn_pokus_cal(mlp,ker,poc_ker,200)
simulout_cal <- nn_get_vystupy(mlp)
plot(chtenejout_cal,type = "l")
lines(simulout_cal,col = "red")
#############################################################################################xx
library(Rcpp)
setwd("C:/Users/danek/Desktop/mlpR/vsnn")
Rcpp::sourceCpp("rcppstuff.cpp")
{cisloslozka <- "18"   ## číslo složky 01 až 18
umisteni <- paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/", cisloslozka)
soubory <- list.files(umisteni, pattern = "_streamflow_qc.txt$", full.names = FALSE)
cislasoubory <- data.frame(id = sub("_.*", "", soubory))
cislasoubory
poradisouboru <- 31
Qcamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_streamflow_qc.txt"), header=FALSE)
VALScamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/basin_mean_forcing/nldas/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_lump_nldas_forcing_leap.txt"), header=FALSE, skip = 4)
names(Qcamel) = c("ID","rok","mesic","den","Q","podm")
##names(VALScamel) = c("rok", "mesic", "den", "delka dne asi[s]", "srazky [mm/den]", "")
Qcamel <- Qcamel[,1:5]
VALScamel <- VALScamel[1:length(Qcamel$Q),]
Qcamel <- Qcamel[1:length(VALScamel$V1),]
Qcamel$Q <- Qcamel$Q * 0.0283168466
Rcamel <- VALScamel$V6
Q <- (Qcamel$Q - min(Qcamel$Q))/(max(Qcamel$Q)-min(Qcamel$Q))
Qkal = Q[1:3000]
Qval = Q[3001:12000]
}
LAG = 5
pn = 10
{
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = LAG )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
chtenejout = Qkal[(LAG+1):length(Qkal)]
dt2 = matrix(0, nrow = (length(Qval)-LAG), ncol = LAG )
for (i in 1:LAG){ dt2[,i] = Qval[(LAG-i+1):(length(Qval)-i)] }
chtenejout2 = Qval[(LAG+1):length(Qval)]
mlp <- udelej_nn()
nn_set_chtenejout(mlp,chtenejout)
nn_set_traindata(mlp,dt)
#nn_shuffle_train(mlp)
#nn_print_data(mlp)
nn_init_nn(mlp,LAG,c(pn,pn,1))
nn_online_bp_adam(mlp,25)
simulout <- nn_get_vystupy(mlp)
nn_set_valdata(mlp,dt2)
nn_valid(mlp)
simulout2 <- nn_get_vystupy(mlp)
nn_set_chtenejout(mlp,chtenejout)
plot(c(Qkal,Qval),type = "l")
lines(c(simulout,simulout2),col = "red")
}
plot(Qval[1:100],type = "l")
lines(simulout2[1:100],col = "red")
