Mt_vys_s = Mt_vys/(1-beta^t)
Vt_vys_s = Vt_vys/(1-beta2^t)
vahy_vystup = vahy_vystup - alfa* Mt_vys_s/(sqrt(Vt_vys_s)+epsi)
t = t+1
for(i in 1:ncol(zmena_kernel)){
for(j in 1:nrow(zmena_kernel)){
konvo = 0
for(k in 1:nrow(delty_vstup)){
konvo = konvo + delty_vstup[k,1]*dtzac[(fl+j+k-2),i] }
zmena_kernel[j,i] = konvo
}}
kernel = kernel - alfa*zmena_kernel
}
cost = sum((chtenejout - simulout)^2)/length(simulout)
print(cost)
}
cost = sum((chtenejout - simulout)^2)/length(simulout)
print(cost)
while(cost>1e-20){
for (fl in 1:(nrow(dtzac)-4)){
vstupymlp = vector(mode = "numeric", length = 3)
for(k in 1:LAG){
konvo = 0
for(i in 1:nrow(kernel)){
for(j in 1:ncol(kernel)){ konvo = konvo + kernel[i,j]*dtzac[(fl+i+k-2),j] }
}
vstupymlp[k] = konvo
}
### prvni vrstva
for(i in 1:LAG){
vystupy_skryty_preda[i,1] = c(vstupymlp,1) %*% vahy[[1]][,i]
vystupy_skryty_poa[i,1] = activ_fun(vystupy_skryty_preda[i,1])
}
### dalsi vrstvy
for(j in 2:(LAG-1)){
for(i in 1:LAG){
vystupy_skryty_preda[i,j] = vystupy_skryty_poa[,j-1] %*% vahy[[j]][,i]
vystupy_skryty_poa[i,j] = activ_fun(vystupy_skryty_preda[i,j])
}
}
### vystupni vrstva
simulout[fl] = vystupy_skryty_poa[,LAG-1] %*% vahy_vystup
delta_vystup = simulout[fl]-chtenejout[fl]
for (i in 1:LAG){delty[i,(LAG-1)] = der_aktiv_fun(vystupy_skryty_preda[i,(LAG-1)])*(vahy_vystup[i] * delta_vystup)}
for (i in (LAG-2):1)
for (j in 1:LAG){
delty[j,i]= der_aktiv_fun(vystupy_skryty_preda[j,i])*(vahy[[i+1]][j,] %*% delty[,(i+1)])
}
for (j in 1:LAG){
delty_vstup[j,1]= der_aktiv_fun(vstupymlp[j])*(vahy[[1]][j,] %*% delty[,1])
}
### prvni vahy
for (j in 1:(LAG+1)){
for (i in 1:(LAG)){
Mt_vah[[1]][j,i] = beta*Mt_vah[[1]][j,i]+(1-beta)*(delty[i,1]* c(vstupymlp,1)[j])
Vt_vah[[1]][j,i] = beta2*Vt_vah[[1]][j,i]+(1-beta2)*(delty[i,1]* c(vstupymlp,1)[j])^2
Mt_vah_s[[1]][j,i] = Mt_vah[[1]][j,i]/(1-beta^t)
Vt_vah_s[[1]][j,i] = Vt_vah[[1]][j,i]/(1-beta2^t)
vahy[[1]][j,i] = vahy[[1]][j,i] - alfa * Mt_vah_s[[1]][j,i]/(sqrt(Vt_vah_s[[1]][j,i])+epsi)
}
}
### ostatni skryty vahy
for (j in 2:(LAG-1))
for (i in 1:(LAG)){
Mt_vah[[j]][,i] = beta*Mt_vah[[j]][,i]+(1-beta)*(delty[i,j] * vystupy_skryty_poa[,(j-1)])
Vt_vah[[j]][,i] = beta2*Vt_vah[[j]][,i]+(1-beta2)*(delty[i,j] * vystupy_skryty_poa[,(j-1)])^2
Mt_vah_s[[j]][,i] = Mt_vah[[j]][,i]/(1-beta^t)
Vt_vah_s[[j]][,i] = Vt_vah[[j]][,i]/(1-beta2^t)
vahy[[j]][,i] = vahy[[j]][,i] - alfa * Mt_vah_s[[j]][,i]/(sqrt(Vt_vah_s[[j]][,i])+epsi)
}
### vystupni vahy
Mt_vys = beta*Mt_vys+(1-beta)*(delta_vystup *vystupy_skryty_poa[,LAG-1])
Vt_vys = beta2*Vt_vys+(1-beta2)*(delta_vystup *vystupy_skryty_poa[,LAG-1])^2
Mt_vys_s = Mt_vys/(1-beta^t)
Vt_vys_s = Vt_vys/(1-beta2^t)
vahy_vystup = vahy_vystup - alfa* Mt_vys_s/(sqrt(Vt_vys_s)+epsi)
t = t+1
for(i in 1:ncol(zmena_kernel)){
for(j in 1:nrow(zmena_kernel)){
konvo = 0
for(k in 1:nrow(delty_vstup)){
konvo = konvo + delty_vstup[k,1]*dtzac[(fl+j+k-2),i] }
zmena_kernel[j,i] = konvo
}}
kernel = kernel - alfa*zmena_kernel
}
cost = sum((chtenejout - simulout)^2)/length(simulout)
print(cost)
}
dta = read.table(file="C:/Users/danek/Desktop/mlpR/podnelirano/QinQout_obs.dat")
Qkal = dta$V3[1:249]
chtenejout = dta$V3[9:250]
Qval = dta$V3[251:499]
dtzac = matrix(0,nrow = (length(Qkal)-3),ncol = 3)
for (i in 1:(length(Qkal)-3)){
dtzac[i,] = Qkal[i:(i+2)]
}
kernel = matrix(runif(9,min = 0, max = 1), nrow = 3, ncol = 3)
zmena_kernel = matrix(runif(9,min = -0.3, max = 0.3), nrow = 3, ncol = 3)
vahy = list()
for (i in 1:(LAG-1)) {
vahy[[i]] = matrix(runif(((LAG+1)*LAG),min = -0.3, max = 0.3), nrow = LAG+1, ncol = LAG)
}
vahy_vystup = runif((LAG+1),0.1)
vystupy_skryty_preda = matrix(1,nrow = LAG+1, ncol = LAG-1)
vystupy_skryty_poa = matrix(1,nrow = LAG+1, ncol = LAG-1)
delty = matrix(0.1,nrow = LAG, ncol = LAG-1)
delty_vstup = matrix(0.1,nrow = LAG, ncol = 1)
simulout = vector(mode = "numeric", length = length(chtenejout))
Mt_vah = list()
for (i in 1:(LAG-1)) {
Mt_vah[[i]] = matrix(0, nrow = LAG+1, ncol = LAG)
}
Mt_vah_s = list()
for (i in 1:(LAG-1)) {
Mt_vah_s[[i]] = matrix(0, nrow = LAG+1, ncol = LAG)
}
Mt_vys = rep(0,(LAG+1))
Mt_vys_s = rep(0,(LAG+1))
Vt_vah = list()
for (i in 1:(LAG-1)) {
Vt_vah[[i]] = matrix(0, nrow = LAG+1, ncol = LAG)
}
Vt_vah_s = list()
for (i in 1:(LAG-1)) {
Vt_vah_s[[i]] = matrix(0, nrow = LAG+1, ncol = LAG)
}
Vt_vys = rep(0,(LAG+1))
Vt_vys_s = rep(0,(LAG+1))
t = 1
beta = 0.9
beta2 = 0.99
epsi = 10^-8
alfa = 0.001
while(cost>1e-20){
for (fl in 1:(nrow(dtzac)-4)){
vstupymlp = vector(mode = "numeric", length = 3)
for(k in 1:LAG){
konvo = 0
for(i in 1:nrow(kernel)){
for(j in 1:ncol(kernel)){ konvo = konvo + kernel[i,j]*dtzac[(fl+i+k-2),j] }
}
vstupymlp[k] = konvo
}
### prvni vrstva
for(i in 1:LAG){
vystupy_skryty_preda[i,1] = c(vstupymlp,1) %*% vahy[[1]][,i]
vystupy_skryty_poa[i,1] = activ_fun(vystupy_skryty_preda[i,1])
}
### dalsi vrstvy
for(j in 2:(LAG-1)){
for(i in 1:LAG){
vystupy_skryty_preda[i,j] = vystupy_skryty_poa[,j-1] %*% vahy[[j]][,i]
vystupy_skryty_poa[i,j] = activ_fun(vystupy_skryty_preda[i,j])
}
}
### vystupni vrstva
simulout[fl] = vystupy_skryty_poa[,LAG-1] %*% vahy_vystup
delta_vystup = simulout[fl]-chtenejout[fl]
for (i in 1:LAG){delty[i,(LAG-1)] = der_aktiv_fun(vystupy_skryty_preda[i,(LAG-1)])*(vahy_vystup[i] * delta_vystup)}
for (i in (LAG-2):1)
for (j in 1:LAG){
delty[j,i]= der_aktiv_fun(vystupy_skryty_preda[j,i])*(vahy[[i+1]][j,] %*% delty[,(i+1)])
}
for (j in 1:LAG){
delty_vstup[j,1]= der_aktiv_fun(vstupymlp[j])*(vahy[[1]][j,] %*% delty[,1])
}
### prvni vahy
for (j in 1:(LAG+1)){
for (i in 1:(LAG)){
Mt_vah[[1]][j,i] = beta*Mt_vah[[1]][j,i]+(1-beta)*(delty[i,1]* c(vstupymlp,1)[j])
Vt_vah[[1]][j,i] = beta2*Vt_vah[[1]][j,i]+(1-beta2)*(delty[i,1]* c(vstupymlp,1)[j])^2
Mt_vah_s[[1]][j,i] = Mt_vah[[1]][j,i]/(1-beta^t)
Vt_vah_s[[1]][j,i] = Vt_vah[[1]][j,i]/(1-beta2^t)
vahy[[1]][j,i] = vahy[[1]][j,i] - alfa * Mt_vah_s[[1]][j,i]/(sqrt(Vt_vah_s[[1]][j,i])+epsi)
}
}
### ostatni skryty vahy
for (j in 2:(LAG-1))
for (i in 1:(LAG)){
Mt_vah[[j]][,i] = beta*Mt_vah[[j]][,i]+(1-beta)*(delty[i,j] * vystupy_skryty_poa[,(j-1)])
Vt_vah[[j]][,i] = beta2*Vt_vah[[j]][,i]+(1-beta2)*(delty[i,j] * vystupy_skryty_poa[,(j-1)])^2
Mt_vah_s[[j]][,i] = Mt_vah[[j]][,i]/(1-beta^t)
Vt_vah_s[[j]][,i] = Vt_vah[[j]][,i]/(1-beta2^t)
vahy[[j]][,i] = vahy[[j]][,i] - alfa * Mt_vah_s[[j]][,i]/(sqrt(Vt_vah_s[[j]][,i])+epsi)
}
### vystupni vahy
Mt_vys = beta*Mt_vys+(1-beta)*(delta_vystup *vystupy_skryty_poa[,LAG-1])
Vt_vys = beta2*Vt_vys+(1-beta2)*(delta_vystup *vystupy_skryty_poa[,LAG-1])^2
Mt_vys_s = Mt_vys/(1-beta^t)
Vt_vys_s = Vt_vys/(1-beta2^t)
vahy_vystup = vahy_vystup - alfa* Mt_vys_s/(sqrt(Vt_vys_s)+epsi)
t = t+1
for(i in 1:ncol(zmena_kernel)){
for(j in 1:nrow(zmena_kernel)){
konvo = 0
for(k in 1:nrow(delty_vstup)){
konvo = konvo + delty_vstup[k,1]*dtzac[(fl+j+k-2),i] }
zmena_kernel[j,i] = konvo
}}
kernel = kernel - alfa*zmena_kernel
}
cost = sum((chtenejout - simulout)^2)/length(simulout)
print(cost)
}
plot(Qkal,type = "l")
lines(simulout,col = "red")
dtzac2 = matrix(0,nrow = (length(Qval)-3),ncol = 3)
for (i in 1:(length(Qval)-3)){
dtzac2[i,] = Qval[i:(i+2)]
}
simulout2 = vector(mode = "numeric", length = length(chtenejout))
for (fl in 1:(nrow(dtzac2)-4)){
vstupymlp = vector(mode = "numeric", length = 3)
for(k in 1:LAG){
konvo = 0
for(i in 1:nrow(kernel)){
for(j in 1:ncol(kernel)){ konvo = konvo + kernel[i,j]*dtzac2[(fl+i+k-2),j] }
}
vstupymlp[k] = konvo
}
### prvni vrstva
for(i in 1:LAG){
vystupy_skryty_preda[i,1] = c(vstupymlp,1) %*% vahy[[1]][,i]
vystupy_skryty_poa[i,1] = activ_fun(vystupy_skryty_preda[i,1])
}
### dalsi vrstvy
for(j in 2:(LAG-1)){
for(i in 1:LAG){
vystupy_skryty_preda[i,j] = vystupy_skryty_poa[,j-1] %*% vahy[[j]][,i]
vystupy_skryty_poa[i,j] = activ_fun(vystupy_skryty_preda[i,j])
}
}
### vystupni vrstva
simulout2[fl] = vystupy_skryty_poa[,LAG-1] %*% vahy_vystup
}
plot(c(Qkal,Qval),type = "l")
lines(c(simulout,simulout2),col = "red")
library(Rcpp)
setwd("C:/Users/danek/Desktop/mlpR/vsnn")
Rcpp::sourceCpp("rcppstuff.cpp")
dta = read.table(file="C:/Users/danek/Desktop/mlpR/podnelirano/QinQout_obs.dat")
Qkal = 100*dta$V3[1:250]/20*2
Qval = dta$V3[251:500]*100/20*2
LAG = 3
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = LAG )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
chtenejout = Qkal[(LAG+1):length(Qkal)]
dt2 = matrix(0, nrow = (length(Qval)-LAG), ncol = LAG )
for (i in 1:LAG){ dt2[,i] = Qval[(LAG-i+1):(length(Qval)-i)] }
mlp <- udelej_nn()
nn_set_rozmery(mlp,c(4,4,2,1))
nn_set_chtenejout(mlp,Qkal)
nn_set_traindata(mlp,dt)
nn_print_data(mlp)
nn_init_nn(mlp)
library(Rcpp)
setwd("C:/Users/danek/Desktop/mlpR/vsnn")
Rcpp::sourceCpp("rcppstuff.cpp")
dta = read.table(file="C:/Users/danek/Desktop/mlpR/podnelirano/QinQout_obs.dat")
Qkal = 100*dta$V3[1:250]/20*2
Qval = dta$V3[251:500]*100/20*2
LAG = 3
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = LAG )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
chtenejout = Qkal[(LAG+1):length(Qkal)]
dt2 = matrix(0, nrow = (length(Qval)-LAG), ncol = LAG )
for (i in 1:LAG){ dt2[,i] = Qval[(LAG-i+1):(length(Qval)-i)] }
mlp <- udelej_nn()
nn_set_rozmery(mlp,c(4,4,2,1))
nn_set_chtenejout(mlp,Qkal)
nn_set_traindata(mlp,dt)
nn_print_data(mlp)
nn_init_nn(mlp,LAG)
nn_online_bp_adam(mlp,500)
simulout <- nn_get_vystupy(mlp)
nn_set_valdata(mlp,dt2)
nn_valid(mlp)
simulout2 <- nn_get_vystupy(mlp)
plot(c(Qkal,Qval),type = "l")
lines(c(simulout,simulout2),col = "red")
error <- nn_count_cost(mlp)
error
library(Rcpp)
setwd("C:/Users/danek/Desktop/mlpR/vsnn")
Rcpp::sourceCpp("rcppstuff.cpp")
dta = read.table(file="C:/Users/danek/Desktop/mlpR/podnelirano/QinQout_obs.dat")
Qkal = 100*dta$V3[1:250]/20*2
Qval = dta$V3[251:500]*100/20*2
LAG = 3
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = LAG )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
chtenejout = Qkal[(LAG+1):length(Qkal)]
dt2 = matrix(0, nrow = (length(Qval)-LAG), ncol = LAG )
for (i in 1:LAG){ dt2[,i] = Qval[(LAG-i+1):(length(Qval)-i)] }
mlp <- udelej_nn()
nn_set_rozmery(mlp,c(4,4,2,1))
nn_set_chtenejout(mlp,Qkal)
nn_set_traindata(mlp,dt)
nn_print_data(mlp)
nn_init_nn(mlp,LAG)
nn_online_bp_adam(mlp,500)
simulout <- nn_get_vystupy(mlp)
nn_set_valdata(mlp,dt2)
nn_valid(mlp)
simulout2 <- nn_get_vystupy(mlp)
plot(c(Qkal,Qval),type = "l")
lines(c(simulout,simulout2),col = "red")
error <- nn_count_cost(mlp)
error
library(Rcpp)
setwd("C:/Users/danek/Desktop/mlpR/vsnn")
Rcpp::sourceCpp("rcppstuff.cpp")
dta = read.table(file="C:/Users/danek/Desktop/mlpR/podnelirano/QinQout_obs.dat")
Qkal = 100*dta$V3[1:250]/20*2
Qval = dta$V3[251:500]*100/20*2
LAG = 3
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = LAG )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
chtenejout = Qkal[(LAG+1):length(Qkal)]
dt2 = matrix(0, nrow = (length(Qval)-LAG), ncol = LAG )
for (i in 1:LAG){ dt2[,i] = Qval[(LAG-i+1):(length(Qval)-i)] }
mlp <- udelej_nn()
nn_set_rozmery(mlp,c(4,4,2,1))
nn_set_chtenejout(mlp,Qkal)
nn_set_traindata(mlp,dt)
nn_print_data(mlp)
nn_init_nn(mlp,LAG)
nn_online_bp_adam(mlp,500)
simulout <- nn_get_vystupy(mlp)
nn_set_valdata(mlp,dt2)
nn_valid(mlp)
simulout2 <- nn_get_vystupy(mlp)
plot(c(Qkal,Qval),type = "l")
lines(c(simulout,simulout2),col = "red")
error <- nn_count_cost(mlp)
error
library(Rcpp)
setwd("C:/Users/danek/Desktop/mlpR/vsnn")
Rcpp::sourceCpp("rcppstuff.cpp")
dta = read.table(file="C:/Users/danek/Desktop/mlpR/podnelirano/QinQout_obs.dat")
Qkal = 100*dta$V3[1:250]/20*2
Qval = dta$V3[251:500]*100/20*2
LAG = 3
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = LAG )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
chtenejout = Qkal[(LAG+1):length(Qkal)]
dt2 = matrix(0, nrow = (length(Qval)-LAG), ncol = LAG )
for (i in 1:LAG){ dt2[,i] = Qval[(LAG-i+1):(length(Qval)-i)] }
mlp <- udelej_nn()
nn_set_rozmery(mlp,c(4,4,2,1))
nn_set_chtenejout(mlp,Qkal)
nn_set_traindata(mlp,dt)
nn_print_data(mlp)
nn_init_nn(mlp,LAG)
nn_online_bp_adam(mlp,10000)
simulout <- nn_get_vystupy(mlp)
nn_set_valdata(mlp,dt2)
nn_valid(mlp)
simulout2 <- nn_get_vystupy(mlp)
plot(c(Qkal,Qval),type = "l")
lines(c(simulout,simulout2),col = "red")
error <- nn_count_cost(mlp)
error
library(Rcpp)
setwd("C:/Users/danek/Desktop/mlpR/vsnn")
Rcpp::sourceCpp("rcppstuff.cpp")
dta = read.table(file="C:/Users/danek/Desktop/mlpR/podnelirano/QinQout_obs.dat")
Qkal = 100*dta$V3[1:250]/20*2
Qval = dta$V3[251:500]*100/20*2
LAG = 3
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = LAG )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
chtenejout = Qkal[(LAG+1):length(Qkal)]
dt2 = matrix(0, nrow = (length(Qval)-LAG), ncol = LAG )
for (i in 1:LAG){ dt2[,i] = Qval[(LAG-i+1):(length(Qval)-i)] }
mlp <- udelej_nn()
nn_set_rozmery(mlp,c(4,4,2,1))
nn_set_chtenejout(mlp,Qkal)
nn_set_traindata(mlp,dt)
nn_print_data(mlp)
nn_init_nn(mlp,LAG)
nn_online_bp_adam(mlp,10000)
simulout <- nn_get_vystupy(mlp)
nn_set_valdata(mlp,dt2)
nn_valid(mlp)
simulout2 <- nn_get_vystupy(mlp)
plot(c(Qkal,Qval),type = "l")
lines(c(simulout,simulout2),col = "red")
error <- nn_count_cost(mlp)
error
library(Rcpp)
setwd("C:/Users/danek/Desktop/mlpR/vsnn")
Rcpp::sourceCpp("rcppstuff.cpp")
dta = read.table(file="C:/Users/danek/Desktop/mlpR/podnelirano/QinQout_obs.dat")
Qkal = 100*dta$V3[1:250]/20*2
Qval = dta$V3[251:500]*100/20*2
LAG = 3
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = LAG )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
chtenejout = Qkal[(LAG+1):length(Qkal)]
dt2 = matrix(0, nrow = (length(Qval)-LAG), ncol = LAG )
for (i in 1:LAG){ dt2[,i] = Qval[(LAG-i+1):(length(Qval)-i)] }
mlp <- udelej_nn()
nn_set_rozmery(mlp,c(4,4,2,1))
nn_set_chtenejout(mlp,Qkal)
nn_set_traindata(mlp,dt)
nn_print_data(mlp)
nn_init_nn(mlp,LAG)
nn_online_bp_adam(mlp,1000)
simulout <- nn_get_vystupy(mlp)
nn_set_valdata(mlp,dt2)
nn_valid(mlp)
simulout2 <- nn_get_vystupy(mlp)
plot(c(Qkal,Qval),type = "l")
lines(c(simulout,simulout2),col = "red")
error <- nn_count_cost(mlp)
error
library(Rcpp)
setwd("C:/Users/danek/Desktop/mlpR/vsnn")
Rcpp::sourceCpp("rcppstuff.cpp")
cisloslozka <- "03"   ## číslo složky 01 až 18
umisteni <- paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/", cisloslozka)
soubory <- list.files(umisteni, pattern = "_streamflow_qc.txt$", full.names = FALSE)
cislasoubory <- data.frame(id = sub("_.*", "", soubory))
cislasoubory
poradisouboru <- 31
Qcamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_streamflow_qc.txt"), header=FALSE)
VALScamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/basin_mean_forcing/nldas/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_lump_nldas_forcing_leap.txt"), header=FALSE, skip = 4)
names(Qcamel) = c("ID","rok","mesic","den","Q","podm")
##names(VALScamel) = c("rok", "mesic", "den", "delka dne asi[s]", "srazky [mm/den]", "")
Qcamel <- Qcamel[,1:5]
VALScamel <- VALScamel[1:length(Qcamel$Q),]
Qcamel <- Qcamel[1:length(VALScamel$V1),]
Qcamel$Q <- Qcamel$Q * 0.0283168466
Rcamel <- VALScamel$V6
Qkal = Qcamel$Q[1:6000]
Qval = Qcamel$Q[6001:12000]
LAG = 3
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = LAG )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
chtenejout = Qkal[(LAG+1):length(Qkal)]
dt2 = matrix(0, nrow = (length(Qval)-LAG), ncol = LAG )
for (i in 1:LAG){ dt2[,i] = Qval[(LAG-i+1):(length(Qval)-i)] }
chtenejout2 = Qval[(LAG+1):length(Qval)]
mlp <- udelej_nn()
nn_set_rozmery(mlp,c(5,4,3,3,1))
nn_set_chtenejout(mlp,chtenejout)
nn_set_traindata(mlp,dt)
nn_print_data(mlp)
nn_init_nn(mlp,LAG)
nn_online_bp_adam(mlp,200)
simulout <- nn_get_vystupy(mlp)
nn_set_valdata(mlp,dt2)
nn_valid(mlp)
simulout2 <- nn_get_vystupy(mlp)
nn_set_chtenejout(mlp,chtenejout)
plot(c(Qkal,Qval),type = "l")
lines(c(simulout,simulout2),col = "red")
error <- nn_count_cost(mlp)
error
library(Rcpp)
setwd("C:/Users/danek/Desktop/mlpR/vsnn")
Rcpp::sourceCpp("rcppstuff.cpp")
cisloslozka <- "03"   ## číslo složky 01 až 18
umisteni <- paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/", cisloslozka)
soubory <- list.files(umisteni, pattern = "_streamflow_qc.txt$", full.names = FALSE)
cislasoubory <- data.frame(id = sub("_.*", "", soubory))
cislasoubory
poradisouboru <- 31
Qcamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_streamflow_qc.txt"), header=FALSE)
VALScamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/basin_mean_forcing/nldas/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_lump_nldas_forcing_leap.txt"), header=FALSE, skip = 4)
names(Qcamel) = c("ID","rok","mesic","den","Q","podm")
##names(VALScamel) = c("rok", "mesic", "den", "delka dne asi[s]", "srazky [mm/den]", "")
Qcamel <- Qcamel[,1:5]
VALScamel <- VALScamel[1:length(Qcamel$Q),]
Qcamel <- Qcamel[1:length(VALScamel$V1),]
Qcamel$Q <- Qcamel$Q * 0.0283168466
Rcamel <- VALScamel$V6
Qkal = Qcamel$Q[1:6000]
Qval = Qcamel$Q[6001:12000]
LAG = 5
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = LAG )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
chtenejout = Qkal[(LAG+1):length(Qkal)]
dt2 = matrix(0, nrow = (length(Qval)-LAG), ncol = LAG )
for (i in 1:LAG){ dt2[,i] = Qval[(LAG-i+1):(length(Qval)-i)] }
chtenejout2 = Qval[(LAG+1):length(Qval)]
mlp <- udelej_nn()
nn_set_rozmery(mlp,c(10,10,10,10,1))
nn_set_chtenejout(mlp,chtenejout)
nn_set_traindata(mlp,dt)
nn_print_data(mlp)
nn_init_nn(mlp,LAG)
nn_online_bp_adam(mlp,1000)
simulout <- nn_get_vystupy(mlp)
nn_set_valdata(mlp,dt2)
nn_valid(mlp)
simulout2 <- nn_get_vystupy(mlp)
nn_set_chtenejout(mlp,chtenejout)
plot(c(Qkal,Qval),type = "l")
lines(c(simulout,simulout2),col = "red")
error <- nn_count_cost(mlp)
error
