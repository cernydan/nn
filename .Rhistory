for (i in 1:LAG){delty_posledni[i] = der_aktiv_fun(vystupy_skryty_preda[i,2])*(vahy_vystup[i] * delta_vystup)}
for (j in 1:LAG){
for (i in 1:LAG){ delty[j,i]= der_aktiv_fun(vystupy_skryty_preda[j,1])*(vahy_skryty2[j,] %*% delty_posledni)}
}
### prvni vahy
for (j in 1:(LAG+1)){
for (i in 1:(LAG)){
vahy_skryty1[j,i] = vahy_skryty1[j,i] - alfa * sum(delty[,i])* dt[k,i]
}
}
for (i in 1:(LAG)){
vahy_skryty2[,i] = vahy_skryty2[,i] - alfa * delty_posledni[i] * vystupy_skryty_poa[,1]
}
### online backprop vystupni vrstva
vahy_vystup = vahy_vystup - alfa* delta_vystup *vystupy_skryty_poa[,LAG-1]
}
cost = sum(chtenejout - simulout)^2/length(simulout)
plot(Qkal,type = "l")
lines(simulout, col = "red")
print(cost)
dt
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = (LAG+1) )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
dt[,LAG+1] = rep(1, times = (length(Qkal)-LAG))
chtenejout = Qkal[LAG+1:(length(Qkal)-LAG)]
chtenejout
for (i in 1:(LAG-1)) {
matvah <- matrix(runif(((LAG+1)*LAG),0.1), nrow = LAG+1, ncol = LAG)
assign(paste0("vahy_skryty", i), matvah)
}
vahy_vystup = runif((LAG+1),0.1)
vystupy_skryty_preda = matrix(1,nrow = LAG+1, ncol = LAG-1)
vystupy_skryty_poa = matrix(1,nrow = LAG+1, ncol = LAG-1)
simulout = vector(mode = "numeric", length = length(chtenejout))
alfa = 0.9
delty_posledni = vector(mode = "numeric", length = LAG)
delty = matrix(1,nrow = LAG, ncol = LAG)
for (k in 1:length(chtenejout)){
### prvni vrstva
for(i in 1:LAG){
vystupy_skryty_preda[i,1] = dt[k,] %*% vahy_skryty1[,i]
vystupy_skryty_poa[i,1] = activ_fun(vystupy_skryty_preda[i,1])
}
### dalsi vrstvy
for(j in 2:(LAG-1)){
jmeno_mat = paste0("vahy_skryty", j)
aktualni_mat = get(jmeno_mat)
for(i in 1:LAG){
vystupy_skryty_preda[i,j] = vystupy_skryty_poa[,j-1] %*% aktualni_mat[,i]
vystupy_skryty_poa[i,j] = activ_fun(vystupy_skryty_preda[i,j])
}
}
### vystupni vrstva
simulout[k] = vystupy_skryty_poa[,LAG-1] %*% vahy_vystup
### online backprop skryty vrstvy
delta_vystup = simulout[k]-chtenejout[k]
for (i in 1:LAG){delty_posledni[i] = der_aktiv_fun(vystupy_skryty_preda[i,2])*(vahy_vystup[i] * delta_vystup)}
for (j in 1:LAG){
for (i in 1:LAG){ delty[j,i]= der_aktiv_fun(vystupy_skryty_preda[j,1])*(vahy_skryty2[j,] %*% delty_posledni)}
}
### prvni vahy
for (j in 1:(LAG+1)){
for (i in 1:(LAG)){
vahy_skryty1[j,i] = vahy_skryty1[j,i] - alfa * sum(delty[,i])* dt[k,i]
}
}
for (i in 1:(LAG)){
vahy_skryty2[,i] = vahy_skryty2[,i] - alfa * delty_posledni[i] * vystupy_skryty_poa[,1]
}
### online backprop vystupni vrstva
vahy_vystup = vahy_vystup - alfa* delta_vystup *vystupy_skryty_poa[,LAG-1]
}
cost = sum(chtenejout - simulout)^2/length(simulout)
plot(Qkal,type = "l")
lines(simulout, col = "red")
print(cost)
chtenejout - simulout
chtenejout
simulout
vystupy_skryty_poa[,LAG-1] %*% vahy_vystup
vahy_vystup
vahy_vystup = runif((LAG+1),0.1)
activ_fun = function(a){
return(exp(a)/(exp(a)+1))
}
der_aktiv_fun = function(a){
return(activ_fun(a)*(1-activ_fun(a)))
}
cisloslozka <- "16"   ## číslo složky 01 až 18
umisteni <- paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/", cisloslozka)
soubory <- list.files(umisteni, pattern = "_streamflow_qc.txt$", full.names = FALSE)
cislasoubory <- data.frame(id = sub("_.*", "", soubory))
cislasoubory
poradisouboru <- 13
Qcamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_streamflow_qc.txt"), header=FALSE)
VALScamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/basin_mean_forcing/nldas/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_lump_nldas_forcing_leap.txt"), header=FALSE, skip = 4)
names(Qcamel) = c("ID","rok","mesic","den","Q","podm")
##names(VALScamel) = c("rok", "mesic", "den", "delka dne asi[s]", "srazky [mm/den]", "")
Qcamel <- Qcamel[,1:5]
VALScamel <- VALScamel[1:length(Qcamel$Q),]
Qcamel <- Qcamel[1:length(VALScamel$V1),]
Qkal = Qcamel$Q[1:2000]
Qval = Qcamel$Q[2001:4000]
LAG = 3   ##  TOHLE URČUJE VŠECHNO - MINIMALNE 2 !!!
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = (LAG+1) )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
dt[,LAG+1] = rep(1, times = (length(Qkal)-LAG))
chtenejout = Qkal[LAG+1:(length(Qkal)-LAG)]
for (i in 1:(LAG-1)) {
matvah <- matrix(runif(((LAG+1)*LAG),0.1), nrow = LAG+1, ncol = LAG)
assign(paste0("vahy_skryty", i), matvah)
}
vahy_vystup = runif((LAG+1),0.1)
vystupy_skryty_preda = matrix(1,nrow = LAG+1, ncol = LAG-1)
vystupy_skryty_poa = matrix(1,nrow = LAG+1, ncol = LAG-1)
simulout = vector(mode = "numeric", length = length(chtenejout))
simulout
alfa = 0.01
delty_posledni = vector(mode = "numeric", length = LAG)
delty = matrix(1,nrow = LAG, ncol = LAG)
for (k in 1:20){
### prvni vrstva
for(i in 1:LAG){
vystupy_skryty_preda[i,1] = dt[k,] %*% vahy_skryty1[,i]
vystupy_skryty_poa[i,1] = activ_fun(vystupy_skryty_preda[i,1])
}
### dalsi vrstvy
for(j in 2:(LAG-1)){
jmeno_mat = paste0("vahy_skryty", j)
aktualni_mat = get(jmeno_mat)
for(i in 1:LAG){
vystupy_skryty_preda[i,j] = vystupy_skryty_poa[,j-1] %*% aktualni_mat[,i]
vystupy_skryty_poa[i,j] = activ_fun(vystupy_skryty_preda[i,j])
}
}
### vystupni vrstva
simulout[k] = vystupy_skryty_poa[,LAG-1] %*% vahy_vystup
### online backprop skryty vrstvy
delta_vystup = simulout[k]-chtenejout[k]
for (i in 1:LAG){delty_posledni[i] = der_aktiv_fun(vystupy_skryty_preda[i,2])*(vahy_vystup[i] * delta_vystup)}
for (j in 1:LAG){
for (i in 1:LAG){ delty[j,i]= der_aktiv_fun(vystupy_skryty_preda[j,1])*(vahy_skryty2[j,] %*% delty_posledni)}
}
### prvni vahy
for (j in 1:(LAG+1)){
for (i in 1:(LAG)){
vahy_skryty1[j,i] = vahy_skryty1[j,i] - alfa * sum(delty[,i])* dt[k,i]
}
}
for (i in 1:(LAG)){
vahy_skryty2[,i] = vahy_skryty2[,i] - alfa * delty_posledni[i] * vystupy_skryty_poa[,1]
}
### online backprop vystupni vrstva
vahy_vystup = vahy_vystup - alfa* delta_vystup *vystupy_skryty_poa[,LAG-1]
}
LAG = 3   ##  TOHLE URČUJE VŠECHNO - MINIMALNE 2 !!!
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = (LAG+1) )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
dt[,LAG+1] = rep(1, times = (length(Qkal)-LAG))
chtenejout = Qkal[LAG+1:(length(Qkal)-LAG)]
for (i in 1:(LAG-1)) {
matvah <- matrix(runif(((LAG+1)*LAG),0.1), nrow = LAG+1, ncol = LAG)
assign(paste0("vahy_skryty", i), matvah)
}
vahy_vystup = runif((LAG+1),0.1)
vystupy_skryty_preda = matrix(1,nrow = LAG+1, ncol = LAG-1)
vystupy_skryty_poa = matrix(1,nrow = LAG+1, ncol = LAG-1)
simulout = vector(mode = "numeric", length = length(chtenejout))
alfa = 0.01
delty_posledni = vector(mode = "numeric", length = LAG)
delty = matrix(1,nrow = LAG, ncol = LAG)
for (k in 1:20){
### prvni vrstva
for(i in 1:LAG){
vystupy_skryty_preda[i,1] = dt[k,] %*% vahy_skryty1[,i]
vystupy_skryty_poa[i,1] = activ_fun(vystupy_skryty_preda[i,1])
}
### dalsi vrstvy
for(j in 2:(LAG-1)){
jmeno_mat = paste0("vahy_skryty", j)
aktualni_mat = get(jmeno_mat)
for(i in 1:LAG){
vystupy_skryty_preda[i,j] = vystupy_skryty_poa[,j-1] %*% aktualni_mat[,i]
vystupy_skryty_poa[i,j] = activ_fun(vystupy_skryty_preda[i,j])
}
}
### vystupni vrstva
simulout[k] = vystupy_skryty_poa[,LAG-1] %*% vahy_vystup
### online backprop skryty vrstvy
delta_vystup = simulout[k]-chtenejout[k]
for (i in 1:LAG){delty_posledni[i] = der_aktiv_fun(vystupy_skryty_preda[i,2])*(vahy_vystup[i] * delta_vystup)}
for (j in 1:LAG){
for (i in 1:LAG){ delty[j,i]= der_aktiv_fun(vystupy_skryty_preda[j,1])*(vahy_skryty2[j,] %*% delty_posledni)}
}
### prvni vahy
for (j in 1:(LAG+1)){
for (i in 1:(LAG)){
vahy_skryty1[j,i] = vahy_skryty1[j,i] - alfa * sum(delty[,i])* dt[k,i]
}
}
for (i in 1:(LAG)){
vahy_skryty2[,i] = vahy_skryty2[,i] - alfa * delty_posledni[i] * vystupy_skryty_poa[,1]
}
### online backprop vystupni vrstva
vahy_vystup = vahy_vystup - alfa* delta_vystup *vystupy_skryty_poa[,LAG-1]
print(vystupy_skryty_preda)
}
Qcamel <- Qcamel * 0.0283168466
Qkal = Qcamel$Q[1:2000]
Qval = Qcamel$Q[2001:4000]
Qkal
Qkal = Qcamel$Q[1:2000]
Qval = Qcamel$Q[2001:4000]
LAG = 3   ##  TOHLE URČUJE VŠECHNO - MINIMALNE 2 !!!
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = (LAG+1) )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
dt[,LAG+1] = rep(1, times = (length(Qkal)-LAG))
chtenejout = Qkal[LAG+1:(length(Qkal)-LAG)]
for (i in 1:(LAG-1)) {
matvah <- matrix(runif(((LAG+1)*LAG),0.1), nrow = LAG+1, ncol = LAG)
assign(paste0("vahy_skryty", i), matvah)
}
vahy_vystup = runif((LAG+1),0.1)
vystupy_skryty_preda = matrix(1,nrow = LAG+1, ncol = LAG-1)
vystupy_skryty_poa = matrix(1,nrow = LAG+1, ncol = LAG-1)
simulout = vector(mode = "numeric", length = length(chtenejout))
alfa = 0.01
delty_posledni = vector(mode = "numeric", length = LAG)
delty = matrix(1,nrow = LAG, ncol = LAG)
activ_fun = function(a){
return(exp(a)/(exp(a)+1))
}
der_aktiv_fun = function(a){
return(activ_fun(a)*(1-activ_fun(a)))
}
cisloslozka <- "16"   ## číslo složky 01 až 18
umisteni <- paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/", cisloslozka)
soubory <- list.files(umisteni, pattern = "_streamflow_qc.txt$", full.names = FALSE)
cislasoubory <- data.frame(id = sub("_.*", "", soubory))
cislasoubory
poradisouboru <- 13
Qcamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_streamflow_qc.txt"), header=FALSE)
VALScamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/basin_mean_forcing/nldas/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_lump_nldas_forcing_leap.txt"), header=FALSE, skip = 4)
names(Qcamel) = c("ID","rok","mesic","den","Q","podm")
##names(VALScamel) = c("rok", "mesic", "den", "delka dne asi[s]", "srazky [mm/den]", "")
Qcamel <- Qcamel[,1:5]
VALScamel <- VALScamel[1:length(Qcamel$Q),]
Qcamel <- Qcamel[1:length(VALScamel$V1),]
Qcamel <- Qcamel * 0.0283168466
Qkal = Qcamel$Q[1:2000]
Qval = Qcamel$Q[2001:4000]
LAG = 3   ##  TOHLE URČUJE VŠECHNO - MINIMALNE 2 !!!
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = (LAG+1) )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
dt[,LAG+1] = rep(1, times = (length(Qkal)-LAG))
chtenejout = Qkal[LAG+1:(length(Qkal)-LAG)]
for (i in 1:(LAG-1)) {
matvah <- matrix(runif(((LAG+1)*LAG),0.1), nrow = LAG+1, ncol = LAG)
assign(paste0("vahy_skryty", i), matvah)
}
vahy_vystup = runif((LAG+1),0.1)
vystupy_skryty_preda = matrix(1,nrow = LAG+1, ncol = LAG-1)
vystupy_skryty_poa = matrix(1,nrow = LAG+1, ncol = LAG-1)
simulout = vector(mode = "numeric", length = length(chtenejout))
alfa = 0.01
delty_posledni = vector(mode = "numeric", length = LAG)
delty = matrix(1,nrow = LAG, ncol = LAG)
for (k in 1:length(chtenejout)){
### prvni vrstva
for(i in 1:LAG){
vystupy_skryty_preda[i,1] = dt[k,] %*% vahy_skryty1[,i]
vystupy_skryty_poa[i,1] = activ_fun(vystupy_skryty_preda[i,1])
}
### dalsi vrstvy
for(j in 2:(LAG-1)){
jmeno_mat = paste0("vahy_skryty", j)
aktualni_mat = get(jmeno_mat)
for(i in 1:LAG){
vystupy_skryty_preda[i,j] = vystupy_skryty_poa[,j-1] %*% aktualni_mat[,i]
vystupy_skryty_poa[i,j] = activ_fun(vystupy_skryty_preda[i,j])
}
}
### vystupni vrstva
simulout[k] = vystupy_skryty_poa[,LAG-1] %*% vahy_vystup
### online backprop skryty vrstvy
delta_vystup = simulout[k]-chtenejout[k]
for (i in 1:LAG){delty_posledni[i] = der_aktiv_fun(vystupy_skryty_preda[i,2])*(vahy_vystup[i] * delta_vystup)}
for (j in 1:LAG){
for (i in 1:LAG){ delty[j,i]= der_aktiv_fun(vystupy_skryty_preda[j,1])*(vahy_skryty2[j,] %*% delty_posledni)}
}
### prvni vahy
for (j in 1:(LAG+1)){
for (i in 1:(LAG)){
vahy_skryty1[j,i] = vahy_skryty1[j,i] - alfa * sum(delty[,i])* dt[k,i]
}
}
for (i in 1:(LAG)){
vahy_skryty2[,i] = vahy_skryty2[,i] - alfa * delty_posledni[i] * vystupy_skryty_poa[,1]
}
### online backprop vystupni vrstva
vahy_vystup = vahy_vystup - alfa* delta_vystup *vystupy_skryty_poa[,LAG-1]
}
cost = sum(chtenejout - simulout)^2/length(simulout)
plot(Qkal,type = "l")
lines(simulout, col = "red")
print(cost)
while(cost>1e-20){
for (k in 1:length(chtenejout)){
### prvni vrstva
for(i in 1:LAG){
vystupy_skryty_preda[i,1] = dt[k,] %*% vahy_skryty1[,i]
vystupy_skryty_poa[i,1] = activ_fun(vystupy_skryty_preda[i,1])
}
### dalsi vrstvy
for(j in 2:(LAG-1)){
jmeno_mat = paste0("vahy_skryty", j)
aktualni_mat = get(jmeno_mat)
for(i in 1:LAG){
vystupy_skryty_preda[i,j] = vystupy_skryty_poa[,j-1] %*% aktualni_mat[,i]
vystupy_skryty_poa[i,j] = activ_fun(vystupy_skryty_preda[i,j])
}
}
### vystupni vrstva
simulout[k] = vystupy_skryty_poa[,LAG-1] %*% vahy_vystup
### online backprop skryty vrstvy
delta_vystup = simulout[k]-chtenejout[k]
for (i in 1:LAG){delty_posledni[i] = der_aktiv_fun(vystupy_skryty_preda[i,2])*(vahy_vystup[i] * delta_vystup)}
for (j in 1:LAG){
for (i in 1:LAG){ delty[j,i]= der_aktiv_fun(vystupy_skryty_preda[j,1])*(vahy_skryty2[j,] %*% delty_posledni)}
}
### prvni vahy
for (j in 1:(LAG+1)){
for (i in 1:(LAG)){
vahy_skryty1[j,i] = vahy_skryty1[j,i] - alfa * sum(delty[,i])* dt[k,i]
}
}
for (i in 1:(LAG)){
vahy_skryty2[,i] = vahy_skryty2[,i] - alfa * delty_posledni[i] * vystupy_skryty_poa[,1]
}
### online backprop vystupni vrstva
vahy_vystup = vahy_vystup - alfa* delta_vystup *vystupy_skryty_poa[,LAG-1]
}
costpred = cost
cost = sum(chtenejout - simulout)^2/length(simulout)
plot(Qkal,type = "l")
lines(simulout, col = "red")
print(cost)
}
plot(Qkal,type = "l")
lines(simulout, col = "red")
print(cost)
dt2 = matrix(0, nrow = (length(Qval)-LAG), ncol = (LAG+1) )
for (i in 1:LAG){ dt2[,i] = Qval[(LAG-i+1):(length(Qval)-i)] }
dt2[,LAG+1] = rep(1, times = (length(Qval)-LAG))
for (k in 1:length(chtenejout)){
### prvni vrstva
for(i in 1:LAG){
vystupy_skryty_preda[i,1] = dt2[k,] %*% vahy_skryty1[,i]
vystupy_skryty_poa[i,1] = activ_fun(vystupy_skryty_preda[i,1])
}
### dalsi vrstvy
for(j in 2:(LAG-1)){
jmeno_mat = paste0("vahy_skryty", j)
aktualni_mat = get(jmeno_mat)
for(i in 1:LAG){
vystupy_skryty_preda[i,j] = vystupy_skryty_poa[,j-1] %*% aktualni_mat[,i]
vystupy_skryty_poa[i,j] = activ_fun(vystupy_skryty_preda[i,j])
}
}
### vystupni vrstva
simulout[k] = vystupy_skryty_poa[,LAG-1] %*% vahy_vystup
}
plot(c(Qkal,Qval),type = "l",ylim = c(0,1.5))
lines(c(Qkal,simulout),col = "red")
plot(c(Qkal,Qval),type = "l")
lines(c(Qkal,simulout),col = "red")
library(Rcpp)
setwd("C:/Users/danek/Desktop/mlpR/vsnn")
Rcpp::sourceCpp("rcppstuff.cpp")
cisloslozka <- "03"   ## číslo složky 01 až 18
umisteni <- paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/", cisloslozka)
soubory <- list.files(umisteni, pattern = "_streamflow_qc.txt$", full.names = FALSE)
cislasoubory <- data.frame(id = sub("_.*", "", soubory))
cislasoubory
poradisouboru <- 31
Qcamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/usgs_streamflow/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_streamflow_qc.txt"), header=FALSE)
VALScamel <- read.table(paste0("D:/testcamel/camel/basin_timeseries_v1p2_metForcing_obsFlow/basin_dataset_public_v1p2/basin_mean_forcing/nldas/",
cisloslozka, "/", as.character(cislasoubory$id[poradisouboru]),
"_lump_nldas_forcing_leap.txt"), header=FALSE, skip = 4)
names(Qcamel) = c("ID","rok","mesic","den","Q","podm")
##names(VALScamel) = c("rok", "mesic", "den", "delka dne asi[s]", "srazky [mm/den]", "")
Qcamel <- Qcamel[,1:5]
VALScamel <- VALScamel[1:length(Qcamel$Q),]
Qcamel <- Qcamel[1:length(VALScamel$V1),]
Qcamel$Q <- Qcamel$Q * 0.0283168466
Rcamel <- VALScamel$V6
Qkal = Qcamel$Q[1:9000]
Qval = Qcamel$Q[9001:12000]
LAG = 4
pn = 200
{
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = LAG )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
chtenejout = Qkal[(LAG+1):length(Qkal)]
dt2 = matrix(0, nrow = (length(Qval)-LAG), ncol = LAG )
for (i in 1:LAG){ dt2[,i] = Qval[(LAG-i+1):(length(Qval)-i)] }
chtenejout2 = Qval[(LAG+1):length(Qval)]
mlp <- udelej_nn()
nn_set_chtenejout(mlp,chtenejout)
nn_set_traindata(mlp,dt)
#nn_shuffle_train(mlp)
#nn_print_data(mlp)
nn_init_nn(mlp,LAG,c(pn,1))
nn_online_bp_adam(mlp,20)
simulout <- nn_get_vystupy(mlp)
nn_set_valdata(mlp,dt2)
nn_valid(mlp)
simulout2 <- nn_get_vystupy(mlp)
nn_set_chtenejout(mlp,chtenejout)
plot(c(Qkal,Qval),type = "l")
lines(c(simulout,simulout2),col = "red")
error <- nn_count_cost(mlp)
error
}
LAG = 10
pn = 1000
{
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = LAG )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
chtenejout = Qkal[(LAG+1):length(Qkal)]
dt2 = matrix(0, nrow = (length(Qval)-LAG), ncol = LAG )
for (i in 1:LAG){ dt2[,i] = Qval[(LAG-i+1):(length(Qval)-i)] }
chtenejout2 = Qval[(LAG+1):length(Qval)]
mlp <- udelej_nn()
nn_set_chtenejout(mlp,chtenejout)
nn_set_traindata(mlp,dt)
#nn_shuffle_train(mlp)
#nn_print_data(mlp)
nn_init_nn(mlp,LAG,c(pn,1))
nn_online_bp_adam(mlp,20)
simulout <- nn_get_vystupy(mlp)
nn_set_valdata(mlp,dt2)
nn_valid(mlp)
simulout2 <- nn_get_vystupy(mlp)
nn_set_chtenejout(mlp,chtenejout)
plot(c(Qkal,Qval),type = "l")
lines(c(simulout,simulout2),col = "red")
error <- nn_count_cost(mlp)
error
}
LAG = 5
pn = 3000
{
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = LAG )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
chtenejout = Qkal[(LAG+1):length(Qkal)]
dt2 = matrix(0, nrow = (length(Qval)-LAG), ncol = LAG )
for (i in 1:LAG){ dt2[,i] = Qval[(LAG-i+1):(length(Qval)-i)] }
chtenejout2 = Qval[(LAG+1):length(Qval)]
mlp <- udelej_nn()
nn_set_chtenejout(mlp,chtenejout)
nn_set_traindata(mlp,dt)
#nn_shuffle_train(mlp)
#nn_print_data(mlp)
nn_init_nn(mlp,LAG,c(pn,1))
nn_online_bp_adam(mlp,20)
simulout <- nn_get_vystupy(mlp)
nn_set_valdata(mlp,dt2)
nn_valid(mlp)
simulout2 <- nn_get_vystupy(mlp)
nn_set_chtenejout(mlp,chtenejout)
plot(c(Qkal,Qval),type = "l")
lines(c(simulout,simulout2),col = "red")
error <- nn_count_cost(mlp)
error
}
LAG = 5
pn = 50
{
dt = matrix(0, nrow = (length(Qkal)-LAG), ncol = LAG )
for (i in 1:LAG){ dt[,i] = Qkal[(LAG-i+1):(length(Qkal)-i)] }
chtenejout = Qkal[(LAG+1):length(Qkal)]
dt2 = matrix(0, nrow = (length(Qval)-LAG), ncol = LAG )
for (i in 1:LAG){ dt2[,i] = Qval[(LAG-i+1):(length(Qval)-i)] }
chtenejout2 = Qval[(LAG+1):length(Qval)]
mlp <- udelej_nn()
nn_set_chtenejout(mlp,chtenejout)
nn_set_traindata(mlp,dt)
#nn_shuffle_train(mlp)
#nn_print_data(mlp)
nn_init_nn(mlp,LAG,c(pn,1))
nn_online_bp_adam(mlp,20)
simulout <- nn_get_vystupy(mlp)
nn_set_valdata(mlp,dt2)
nn_valid(mlp)
simulout2 <- nn_get_vystupy(mlp)
nn_set_chtenejout(mlp,chtenejout)
plot(c(Qkal,Qval),type = "l")
lines(c(simulout,simulout2),col = "red")
error <- nn_count_cost(mlp)
error
}
